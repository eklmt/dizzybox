#+title: Dizzybox

A container manager inspired by distrobox.

* Why
Why not.

* Install
Podman is a required runtime dependency for the host.
Compile dizzybox.c with a C compiler.
Static linking is recommended to be independent of libc.
You can optionally symlink the subcommands.

#+begin_src sh
gcc dizzybox.c -o ~/.local/bin/dizzybox -static
ln -s dizzybox ~/.local/bin/dizzybox-enter
ln -s dizzybox ~/.local/bin/dizzybox-create
ln -s dizzybox ~/.local/bin/dizzybox-rm
#+end_src

* Subcommands
** help
Prints out help information; this is not yet very complete.

** enter [CONTAINER] [...COMMAND]
Enters a container. If command is unspecified, it defaults to the shell configured in the container.
chsh can be used in the container to change the shell.

** create [--image IMAGE] [CONTAINER]
Creates the container with the specified image.

** upgrade [CONTAINER]
This can be used to upgrade/reinstall the entrypoint.

** rm [CONTAINER]
Removes the specified container. Currently the same as calling podman rm directly.

* Using Nix for the container
Run src_sh{profiles/nix.sh}. You can then enter with src_sh{dizzybox enter nix}.

If you try to run programs installed with nix-env directly from enter, you will find they are not on the PATH.
To fix this, run your command with sh -lc.
#+begin_src sh
dizzybox enter nix sh -lc 'exec zsh'
#+end_src

** Export
Currently there's no export, just use shell aliases.

** Differences with distrobox
Distrobox is a much more tested and stable utility.

Dizzybox does not install anything in the container by default, including sudo;
instead, the --su option can be used on entry.

Dizzybox has fewer host dependencies, only requiring podman to use, and a C compiler to build.

Distrobox's main command is a wrapper for subcommands' scripts;
dizzybox uses a monolithic main program which can be symlinked.
